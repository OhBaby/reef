import config
import shutil
import subprocess
import os

config.getSettings("security").setdefault("dir", "security")
config.getSettings("security").setdefault("backedup", False)
config.getSettings("security").setdefault("certificate", os.path.expanduser("~/.ssh/id_rsa"))
config.getSettings("security").setdefault("customkey", False)

# Generates a new insecure key
def makeKey():
    ensureSecurityDir()
    try:
        os.remove(keyPath())
        os.remove(keyPath()+".pub")
    except: pass

    command = [
        "ssh-keygen",
        "-t", "rsa",
        "-f", keyPath(),
        "-q",
        "-C", "Generated by Reef for use with Vazels",
        "-N", "",
    ]
    subprocess.Popen(
        command,
        stdout=open('/dev/null','w'),
        stderr=subprocess.STDOUT
    ).wait()
    config.getSettings("security")["customkey"] = True
    config.getSettings("security")["certificate"] = keyPath()

# Authorises key in authorized_hosts
def authoriseKey():
    backup()
    try:
        with open(authKeysFile(), 'a') as dst:
            with open(keyPath()+".pub", 'r') as src:
                shutil.copyfileobj(src, dst)
    except:
        print "Couldn't authorize new key, restoring backup..."
        restore()
    

# Backs up old authorised keys if not already backed up
def backup():
    if not config.getSettings("security")["backedup"]:
        ensureSecurityDir()
        try:
            os.remove(backupFile())
        except: pass # Means it probably didn't exist
        try:
            shutil.copy2(authKeysFile(), backupFile())
        # Ignore failure as it just means there was nothing to backup
        except IOError: pass
        config.getSettings("security")["backedup"] = True


# Restores old authorised keys if they've been backed up
def restore():
    if config.getSettings("security")["backedup"]:
        ensureSecurityDir()
        try:
            shutil.move(backupFile(), authKeysFile())
        # Failure means there was not backup, so delete file
        except IOError:
            try: os.remove(authKeysFile())
            except: pass
        config.getSettings("security")["backedup"] = True

def authKeysFile():
    return os.path.expanduser("~/.ssh/authorized_keys")
    

def backupFile():
    return os.path.join(
        securityDir(),
        "authorized_hosts"
    )


def keyPath():
    return os.path.join(
        securityDir(),
        "key"
    )


def securityDir():
    return os.path.join(
        config.getSettings("global")["projdir"],
        config.getSettings("security")["dir"],
    )    


def ensureSecurityDir():
    if not os.path.isdir(securityDir()):
        os.mkdir(securityDir())
